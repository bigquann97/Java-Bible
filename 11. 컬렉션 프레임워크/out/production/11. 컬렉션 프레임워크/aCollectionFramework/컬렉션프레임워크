데이터 군을 저장하는 클래스들을 표준화한 설계 - 컬렉션 프레임웍

인터페이스, 다형성을 이용한 객체 지향적 설계를 통한 표준화
인터페이스 List, Set => 인터페이스 Collection
인터페이스 Map

List - 순서O, 데이터 중복 허용O - Stack, Vector, ArrayList, LinkedList
Set - 순서X, 데이터 중복 허용X - HashSet, SortedSet, TreeSet
Map - Key와 Value Pair - 순서X, 키 중복X, 값 중복O - HashTable, HashMap, LinkedHashMap, SortedMap, TreeMap

ArrayList - List인터페이스 구현 - 데이터 저장순서 유지, 중복 허용 - Vector의 개선판
=> Object배열에의 순차적 저장 - 모든 종류의 객체를 담을 수 있다

LinkedList - 배열의 단점(크기 변경 불가, 비순차적 데이터 추가 및 삭제 시간소요) 보완
=> 불연속적으로 존재하는 데이터를 서로 연결한 형태
=> 단방향 이동으로 인해 이전 요소에 대한 접근 보완한 것인 더블 링크드 리스트(doubly linked list)
=> 보다 접근성 향상시킨 doubly circular linked list - 처음 이전은 끝, 끝 다음은 처음

- 배열은 원하는 위치를 수치상 계산이 가능 - 인덱스 n데이터주소 = 배열주소 + n * 데이터타입크기
- LinkedList는 처음부터 n번쨰 데이터까지 따라가야만 원하는 값 - 접근시간이 길어짐

데이터의 개수가 변하지 않는 경우 ArrayList // 데이터 개수 변경이 잦다면 LinkedList
=> 서로 변환 가능