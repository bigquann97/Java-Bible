3. 애너테이션(Annotation)
3.1 애너테이션이란?
Annotation Interface - 주석처럼 프로그래밍 언어에 영향을 미치지 않으면서, 다른 프로그램에 유용한 정보 제공
@Test - 특정 메서드만 테스트하기
JDK제공 표준 애너테이션 - 컴파일러에게 유용한 정보 제공
=> 새로운 애너테이션 정의하는 메타 애너테이션

3.2 표준 애너테이션
@Override - 메서드 앞에만, 조상 메서드를 오버라이딩할거다

@Deprecated - 더 이상 사용되지 않는 필드나 메서드에 붙임
=> 가능한 Deprecated가 붙은 대상을 사용하지 않는것이 좋다

@FunctionalInterface - 함수형 인터페이스의 선언 - 실수방지 - 올바르게 선언되었는지 확인

@SuppressWarnings - 컴파일러가 보여주는 경고메시지 나타나지 않도록
=> deprecation, unchecked(지네릭스 타입지정X 시), rawtypes(지네릭스 사용하지 않아서), varargs(가변인자의 타입이 지네릭 타입일때)
=> 억제하려는 경고 메시지를 애너테이션의 뒤에 괄호 문자열 지정 - @SuppressWarnings("unchecked")
=> 둘 이상의 경고 억제시 {}추가 - @SuppressWarnings({"deprecation", "unchecked"})

@SafeVarags - 메서드에 선언된 가변인자의 타입이 non-reifiable타입일 경우, 해당 메서드를 선언하는 부분과 호출부분에서 unchecked경고 발생
=> 해당 코드에 문제 없으면, @SafeVarags 사용 - static, final붙은 메서드와 생성자에만 붙일 수 있음
=> 오버라이드 될 수 있는 메서드에 사용 불가
=> 컴파일 후에도 제거되지 않는 reifiable타입, 제거되는 non-reifiable 타입 - 지네릭타입 대부분 non-reifiable

3.3 메타 애너테이션
메타 애너테이션 - 애너테이션을 위한 애너테이션 => 애너테이션의 적용대상이나 유지기간 등 지정
@Target - 애너테이션이 적용 가능한 대상을 지정

@Retention - 애너테이션이 유지되는 기간을 지정

@Documented - 애너테이션에 저장된 정보가 javadoc으로 작성한 문서에 포함되도록 함

@Inherited - 애너테이션이 자손클래스에 상속되도록 함

@Repeatable - 애너테이션을 여러 개 붙일 수 있음

@Native - 네이티브 메서드에 의해 참조되는 '상수필드'에 붙이는 애너테이션

3.4 애너테이션 타입 정의하기
@interface 애너테이션이름 {
    타입 요소이름(); // 애너테이션 요소 선언
    ...
}

애너테이션의 요소 => 멤버변수같이 쓰면 됨
=> 반환값이 있고, 매개변수는 없는 추상 메서드의 형태 - 상속을 통해 구현하지 않아도 됨
=> 애너테이션을 적용할 때 이 요소들의 값을 빠짐없이 지정해주어야함

java.lang.annotation.Annotation
모든 애너테이션의 조상 Annotation - 상속허용X - 일반적인 인터페이스로 정의되어 있음

마커 애너테이션 Marker Annotation

애너테이션 요소의 규칙
1. 요소의 타입은 기본형, String, enum, 애너테이션, Class만 허용된다
2. ()안에 매개변수 선언 불가
3. 예외 선언 불가
4. 요소를 타입 매개변수로 정의 불가

Anno Edit