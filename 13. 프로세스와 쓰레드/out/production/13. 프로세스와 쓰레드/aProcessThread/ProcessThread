1. 프로세스와 쓰레드
프로세스 - 실행중인 프로그램 - OS로부터 실행에 필요한 자원(메모리)을 할당받아 프로세스 된다
프로세스 - 데이터, 메모리 등의 '자원' // '쓰레드' 로 구성
프로세스의 자원을 이용해 실제 작업을 수행하는 쓰레드
=> 모든 프로세스엔 최소 하나 이상의 쓰레드, 둘 이상의 쓰레드를 가진 프로세스는 멀티쓰레드 프로세스

* 멀티태스킹과 멀티쓰레딩
대부분 OS는 멀티태스킹을 지원 - 여러 프로세스 동시 실행
CPU코어는 한번에 하나의 작업만 수행 - 실제 동시처리되는 작업의 개수는 코어의 개수와 일치
코어가 짧은 시간동안 여러 작업 번갈아 수행 - 동시에 수행되는 것처럼

* 멀티쓰레딩의 장단점
장점
도스 - 한번에 한가지 작업 // OS - 멀티태스킹
1. CPU 사용률 향상 2. 자원 보다 효율적 사용 3. 사용자에 대한 응답성 향상 4. 작업이 분리되어 코드 간결
서버 - 하나의 서버 프로세스가 여러 쓰레드 생성해 쓰레드와 사용자의 요청이 일대일로 처리되도록

단점
여러 쓰레드가 같은 프로세스 내에서 자원 공유 작업 - 동기화, 교착상태 문제를 고려해야함

2. 쓰레드의 구현과 실행
쓰레드 구현법 - Thread 클래스 상속(다른클래스 상속 불가) or Runnable 인터페이스 구현(일반적)
Runnable 인터페이스 구현 - 재사용성이 높고, 코드의 일관성을 유지 가능 - 객체지향적 방법
쓰레드를 구현한다? 쓰레드를 통해 작업하고자 하는 내용으로 run()의 몸통을 채우는 것

Thread 상속받으면, 자손클래스에서 조상인 Thread클래스 메서드 직접 호출 가능
Runnable 구현시, Thread클래스의 static메서드인 currentThread()를 호출해 쓰레드에 대한 참조를 얻어와야 호출 가능
static Thread currentThread() 현재 실행중인 쓰레드의 참조 반환, String getName() 쓰레드의 이름을 반환

Thread 이름은 Thread(Runnable target, String name) // Thread(String name) // void setName(String name)으로 지정또는 변경

쓰레드 이름 지저앟지 않으면 Thread-번호 의 형식으로 이름 정해짐

* 쓰레드의 실행 - start()
start()를 호출해야 쓰레드가 실행됨 - t1.start(); ...
=> 실행대기상태에 있다가 자신의 차례가 되어야 실행됨 - 실행 대기중인 쓰레드 없으면 곧바로 실행상태
=> 한번 실행이 종료된 쓰레드는 다시 실행 불가 - 하나의 쓰레드에 대해 start()한번만 호출 가능

3. start(), run()
main메서드에서 run()을 호출하는 것은 생성된 쓰레드를 실행시키는게 아니라, 단순히 클래스에 선언된 메서드를 호출하는 것 뿐
start()는, 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택을 생성한 다음 run()을 호출해, 생성된 호출스택에 run()이 첫번째로 올라감
모든 쓰레드는 독립적인 작업을 수행하기 위해, 자신만의 호출스택을 필요로 하기때문에, 새로운 쓰레드 생성 실행마다 새로운 호출스택 생성 - 종료되면 호출스택 소멸

main쓰레드
- main 메서드가 수행을 마쳐도 다른 쓰레드가 아직 작업을 마치지 않으면, 프로그램이 종료되지 않는다
=> 실행중인 사용자 쓰레드가 하나도 없을때 프로그램은 종료된다
쓰레드는 '사용자 쓰레드', '데몬 쓰레드' 두 종류가 있음
