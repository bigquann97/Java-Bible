7. 데몬쓰레드(Daemon Thread)
다른 일반 쓰레드의 작업을 돕는 보조적 역할 - 일반쓰레드 종료시 데몬쓰레드 강제종료
무한루프와 조건문 이용해 실행 후 대기, 특정조건 만족시 작업 수행 후 다시 대기
실행하기전에 setDaemon(true) 호출 필요 - 데몬쓰레드가 생성한 쓰레드는 자동적으로 데몬 쓰레드가 된다
boolean isDaemon(), void setDaemon(boolean on)
=> ThreadEx10.java, ThreadEx11.java

8. 쓰레드의 실행제어
동기화와 스케줄링 - 효율적으로 프로그래밍 해야한다

* sleep(long millis) - 일정시간 쓰레드 멈춤
시간 지나거나 interrupt() 호출시(InterruptedException발생) 실행대기상태가 됨 - 따라서 항상 try catch문 예외처리 필요
=> ThreadEx12.java
sleep()은 항상 현재 실행중인 쓰레드에 대해 작동하기 때문에 => th1.sleep을 호출해도 실제 영향받는 것은 main 메서드 실행하는 main쓰레드
따라서 sleep()은 static으로 선언됨 + 참조변수보다는 Thread.sleep(2000); 처럼 표시해야한다.

* interrupt()와 interrupted() - 쓰레드의 작업을 취소
쓰레드를 강제로 종료시키지 못함 - interrupt()는 쓰레드의 interrupted상태(인스턴스 변수)를 바꾸는 것 뿐
=> ThreadEx13.java, ThreadEx14.java
sleep에서 interrupt()를 호출시 InterruptedException 발생 - 쓰레드의 interrupted상태는 false로 자동 초기화
catch블럭에 interrupt()를 추가로 넣어줘야 정상작동

* suspend(), resume(), stop()
suspend는 쓰레드 멈춤, resume은 다시 실행대기, stop은 호출 즉시 쓰레드 종료
suspend와 stop은 교착상태 일으키기 쉬워 사용권장 X - deprecated됨
=> ThreadEx15.java, ThreadEx16.java, ThreadEx17.java

* yield() - 다른 쓰레드에게 양보
자신에게 주어진 실행시간을 다음 차례의 쓰레드에게 양보
yeild()와 interrupt()적절히 사용시 프로그램 응답성 높이고 보다 효율적 실행 가능
=> ThreadEx18.java
바쁜 대기상태(busy-waiting) - 실행시간을 낭비하게 되는 상태

* join() - 다른 쓰레드의 작업을 기다린다
자신이 하던 작업 멈추고 다른 쓰레드가 지정된 시간동안 작업 수행하도록 - 시간 지정하지 않으면 작업 모두 마칠때까지 기다림
join도 interrupt에 의해 대기상태 벗어날 수 있음 - try catch문 가능 - static메서드가 아님
=> ThreadEx19.java, ThreadEx20.java