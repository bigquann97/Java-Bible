1. 람다식(Lambda expression)
객체지향언어 + 함수형 언어

1.1 람다식이란? - Lambda expression
메서드를 하나의 식으로 표현한 것 - 메서드의 이름과 반환값이 없어져 '익명함수(anonymous function)' 이라고도 함

1.2 람다식 작성하기
메서드에서 이름과 반환타입을 제거하고, 매개변수 선언부와 몸통{} 사이에 -> 를 추가한다
return문 대신 '식'으로 대신 - 식의 연산 결과가 자동 반환 - ;를 붙이지 않음
매개변수 추론 가능 - 생략 가능 (하나만 생략은 X)
매개변수 하나인경우 괄호 생략 가능
괄호안의 문장 하나일때 괄호 생략 가능 - ; 붙이지 않음 - return문인 경우 괄호 생략 불가

1.3 함수형 인터페이스(Functional Interface)
람다식은 익명 클래스의 객체와 동등
인터페이스 내 추상메서드, 인터페이스 타입의 참조변수f = 인터페이스의 추상메서드 구현 -
하나의 메서드가 선언된 인터페이스를 정의해서 람다식을 다루는 것 - 함수형 인터페이스 - 단 하나의 추상메서드만 정의 - @FuntionalInterface
Collections.sort(list, (s1, s2) -> s2.compareTo(s1));

* 함수형 인터페이스 타입의 매개변수와 반환 타입
매개변수의 타입이 함수형 인터페이스이면 - 람다식을 참조하는 참조변수를 매개변수로 지정해야 한다
=> LabdaEx1.java

* 람다식의 타입과 형변환
