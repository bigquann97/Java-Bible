2. 스트림(Stream)
2.1 스트림이란?
for문, Iterator // Collection, Iterator, Arrays.. 재사용성이 떨어짐
Stream - 데이터 소스를 추상화하고, 자주 사용되는 메서드 정의 - 재사용성이 높아짐

* 스트림은 데이터 소스를 변경하지 않는다
데이터 소스로부터 데이터를 읽기만 할 뿐, 소스를 변경하지 않음 - 새로 담아 반환하는 것은 가능

* 스트림은 일회용이다

* 스트림은 작업을 내부 반복으로 처리한다
스트림 작업이 간결할 수 있는 비결 - '내부 반복' - forEach

* 스트림의 연산
다양한 연산을 통해 복잡한 작업 간단히 처리 - 데이터베이스에 SELECT문으로 질의(쿼리, query)하는 것과 같은 느낌
중간연산 -> 연산 결과가 스트림인 연산 - 스트림에 연속해서 중간 연산 가능
최종연산 -> 연산 결과가 스트림이 아닌 연산 - 스트림의 요소를 소모하므로 단 한번만 가능
중간연산 map(), flatMap() // 최종연산 reduce(), collection() 중요

* 지연된 연산
최종 연산이 수행되기 전까지는 중간 연산이 수행되지 않는다 - 어떤 작업이 수행되어야하는지를 지정해주는 것일 뿐
최종연산이 수행되어야 비로소 스트림의 요소들이 중간연산을 거쳐 최종연산에서 소모된다

* Stream<Integer>와 IntStream
오토박싱 언박싱 비효율 줄이기 위해 데이터 소스의 요소를 기본형으로 다루는 스트림 - IntStream, LongStream, DoubleStream => 효율적

* 병렬 스트림
스트림 장점 - 병렬 처리가 쉽다 - fork&join 프레임웍을 사용해 자동적으로 연산을 병렬 수행 = > 항상 빠른것은 아님
parallel()메서드 호출 병렬처리 // 병렬처리 않으려면 sequential() (parallel 취소할때만)

2.2 스트림 만들기
* 컬렉션
Collection에 stream()정의되어 있음 - List, Set을 구현한 컬렉션 클래스들은 모두 스트림 생성 가능
Stream<T> Collection.stream()

* 배열
Stream과 Arrays에 static 메서드로 정의되어있음 - of(), stream() ..
int long double은 각 Stream 따로 존재 - IntStream ...

* 특정 범위의 정수
Instream.range(int begin, int end) // Instream.rangeClosed(int begin, int end) ( end포함)

* 임의의 수
난수생성 Random 클래스 - 스트림 반환하는 메서드 존재 - ints(), longs(), doubles()
=> 크기가 정해지지 않은 무한스트림(infinite stream)이므로 limit()을 같이 사용해 크기 제한해주어야 함
각 메서드에 매개변수 streamSize넣으면 유한스트림 생성 가능 // begin, end 매개변수 넣어서 범위 지정 가능

* 람다식 - iterate(), generate()
Stream 클래스의 메서드 - 람다식을 매개변수로 받아, 계산되는 값을 요소로 하는 무한 스트림 생성
iterate - 씨앗값(seed) 부터 시작해 람다식 f에 의해 계산된 결과를 다시 seed값으로.. 계속 반복
generate - 이전결과를 사용해 다음 요소를 계산하지는 않음
=> 기본형 스트림 타입의 참조변수로 다룰 수 없음 - mapToInt()같은 메서드로 변환을 해야함

* 파일
java.nio.file.Files - list() - 지정된 디렉토리에있는 파일의 목록을 소스로 하는 스트림 생성해 반환

* 빈 스트림
요소가 없는 빈 스트림 - 스트림에 연산을 수행한 결과가 하나도 없을때, null보다 빈 스트림 반환하는 것이 나음 - empty(), count()

* 두 스트림의 연결
Stream의 static method - concat() - 두 스트림의 요소는 같은 타입이어야 한다.