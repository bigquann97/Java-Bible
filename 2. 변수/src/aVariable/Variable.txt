1. 변수(Variable)
1.1 변수란?
값을 저장할 수 있는 메모리상의 공간 - 단 하나의 값만 저장 가능

1.2 변수의 선언과 초기화
변수타입 변수이름;
메모리의 빈 공간에 '변수타입'에 알맞은 크기의 저장공간이 확보, 이 저장공간은 '변수이름'으로 사용

변수의 초기화 - 변수 선언후엔 반드시 초기화(Initialization) 필요
대입연산자 = 사용 => int age = 25; => 변수 age를 선언하고 25로 초기화
변수는 사용되기 전에 적절한 값으로 초기화 필요
=> VarEx1

두 변수의 값 교환하기
임시 저장소 tmp를 통해 x의 값을 tmp로, y의 값을 x로, tmp의 값을 y로
덧셈 연산자는 두 값을 더하기도 하지만, 문자열과 숫자를 문자열로 결합함
=> VarEx2

1.3 변수의 명명 규칙
프로그래밍에서 사용하는 모든 이름 = 식별자 - 같은 영역 내에서 서로 구분 될 수 있어야 한다
 1. 대소문자가 구분되며 길이에 제한이 없다
 2. 예약어(reserved word)를 사용해서는 안된다(true 사용 불가, True 사용가능)
 3. 숫자로 시작해서는 안된다
 4. 특수문자는 '_'와 '$'만 허용
권장규칙은 아래와 같다
 1. 클래스 이름의 첫글자는 항상 대문자
 2. 여러 단어로 이루어진 이름은 단어의 첫글자를 대문자로 - Camel case
 3. 상수의 이름은 모두 대문자로 - 여러 단어로 이루어진경우 '_'로 구분 - PI, MAX_NUMBER

========================================================================

2. 변수의 타입 - Data(값) cType(종류)
값(Data) - 문자, 숫자 (cType)
자료형에는 문자형, 정수형, 실수형, 논리형

기본형과 참조형
기본형 변수 - 실제 값(data)를 저장 - 논리형, 문자형, 정수형, 실수형 - 총 8개
참조형 변수 - 어떤 값이 저장되어 있는 주소(memory address)를 값으로 갖는다 - 객체의 주소를 저장
          - 참조형 변수 선언시 변수 타입으로 클래스 일므 사용 - 클래스 이름이 참조변수의 타입

2.1 기본형(primitive type)
논리형 - boolean(1) - true or false 반환
문자형 - char(2) - 문자 저장, 하나의 문자만 저장 가능 - 내부적으로 정수(유니코드 - 2byte 문자체계)로 저장
정수형 - byte(1), short(2), int(4), long(8) - 정수 저장, 주로 int 사용, byte는 이진데이터
실수형 - float(4), double(8) - 실수 저장, 주로 double 사용
논리형은 다른 기본형과 연산 불가 - 논리형 제외한 나머지 7개 기본형은 서로 연산과 변환이 가능

'-(2의 n-1승) ~ (2의 n-1승 -1)' 의 데이터 저장 범위
int는 대략 10자리수 , 7~9자리 계산시 넉넉하기 long타입 선언
실수형은 큰 값 표기가능하나, 오차발생가능 - 정밀도가 중요함
float은 정밀도 7자리, double은 15자리 => 10진수로 n자리까지 오차없이 저장 가능하다는 뜻

2.2 상수와 리터럴(constant, literal)
상수 - 값을 저장할수 있는 공간 + 한번 값 저장시 다른값 변경 불가 - 변수타입 앞에 키워드 final
상수는 반드시 선언과 동시에 초기화 - 이후 변경 불가

리터럴 - 그 자체로 값을 의미하는 것
int year = 2014; 에서 2014가 리터럴

상수가 필요한 이유 - 상수는 리터럴에 '의미있는 이름'을 붙여서 코드의 이해와 수정을 쉽게 만든다

리터럴의 타입과 접미사
long 접미사 - l or L // 정수형 접두사 - 0b(2진수), 0(8진수), 0x or 0X(16진수)
정수형 리터럴 구분자 _ 가능 - long big = 100_000_000_000L
float 접미사 - f or F // double 접미사 - d or D(생략가능)
10의 제곱을 나타내는 기호 E또는 e, 그리고 접미사 f, F, d, D를 포함하면 실수형 리터러로 간주
잘 쓰이지않지만, p를 이용해 16진 지수형태 표현 가능 - 실수형으로 표현됨

타입의 불일치
타입이 달라도, 저장범위가 넓은 타입에 좁은 타입의 값을 저장하는 것은 허용됨 - 넓은면 컴파일 에러
int i = 'A'; // 문자'A'의 유니코드인 65가 저장됨
byte와 short타입의 리터럴은 따로 존재X - int 타입의 리터럴사용
double타입의 리터럴(생략 or d or D)을 float타입 변수에 저장 불가

문자 리터럴과 문자열 리터럴
작은따옴표로 문자 하나 감싼 '문자 리터럴', 두 문자이상을 큰 따옴표로 감싼 '문자열 리터럴'
'' 안에는 반드시 하나의 문자가 필요(공백(blank)이라도) - String은 ""안에 아무것도 안넣는 것 허용(빈 문자열)
String name = new String("Java"); - String 객체 생성을 허용함
피연산자 중 어느 한쪽이 String이면 나머지 한쪽을 먼저 String으로 변환 후 두 String을 결합
=> StringEx

2.3 형식화된 출력 - printf()
println은 변수값 그대로 출력 - 값 다른형식으로 출력시 printf()
지시자를 통해 출력 지정, 출력 후 출바꿈 하지 않음 - 줄바꿈 하려면 %n 넣어주어야 함
%b - boolean형식 // %d - 10진수(decimal)형식 // %o - 8진수(octal) 정수 형식 // %x, %X - 16진(hexa-decimal) 정수 형식
%f - 부동 소수점(floating-point) 형식 // %e, %E - 지수(exponent) 형식 // %c - 문자(character) 형식 // %s - 문자열(String) 형식
=> PrintfEx1

실수형 값 출력시 %f, %e, %g - %f가 주로 쓰임 // %e는 지수형태 // %g는 값을 간략히 표현
%f는 기본적으로 소수점 아래 6자리까지만 - 소수점아래 7자리에서 반올림
%전체자리.소수점아래자리f 로 형태 표현 가능
소수점도 한 자리를 차지함 - 소수점 아래 빈자리는 0으로 채우고 정수의 빈자리는 공백으로 채워 전체 자리수를 맞춤
=> PrintfEx2

2.4 화면에서 입력받기 - Scanner
import java.tuil.* 추가 후
Scanner scanner = new Scanner(System.in); // Scanner클래스의 객체 생성
String input = scanner.nextLine() // 입력받은 내용을 input에 저장
int num = Integer.parseInt(input); // 입력받은 내용을 int타입의 값으로 변환
Integer.parseInt() - 문자열을 int타입의 정수로 변환
=> ScannerEx