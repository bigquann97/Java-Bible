1. 연산자
1.1 연산자와 피연산자
연산자 - 연산을 수행하는 기호 // 피연산자 - 연산자의 작업 대상
=> 연산자는 피 연산자로 연산을 수행하고 나면 항상 결과값을 반환한다

1.2 식과 대입연산자
식을 계산하여 결과를 얻으면 '식을 평가한다' 고 함
값을 저장할 수 있는 공간에 결과를 저장해야 사라지지 않음

1.3 연산자의 종류
산술연산자, 비교연산자, 논리연산자, 대입연산자, 기타

피연산자의 개수에 의한 분류 - 피연산자의 개수가 하나면 단항연산자, 두개면 이항연산자, 세개면 삼항연산자
대부분 연산자는 이항 연산자 // 삼하연산자는 오직 ?: 하나 뿐

1.4 연산자의 우선순위와 결합규칙
산술 > 비교 > 논리 > 대입 ; 대입은 제일 마지막에 수행됨
단항(1) > 이항(2) > 삼항(3) ; 단항 연산자의 우선순위가 항상 이항 연산자보다 높다
단항 연산자와 대입 연산자를 제외한 모든 연산의 진행 방향은 왼쪽에서 오른쪽이다

1.5 산술 변화(usual arithmetic conversion)
피연산자 타입을 둘다 일치 시킨 후 계산 진행 - 두 피연산자 타입 중 더 큰 타입으로 일치시킴 (값손실 방지)
피연산자의 타입이 int보다 작은 타입이면 int로 변환된다

2. 단항연산자
2.1 증감연산자 ++ --
피연산자의 값을 1 증가 or 감소시킴 - 전위형, 후위형 존재
전위형 - 값이 참조되기 전에 증가시킴
후위형 - 값이 참도죈 후에 증가시킴
=> OperatorEx1.java, OperatorEx2.java, OperatorEx3.java

2.2 부호연산자 + -
피연산자의 부호 변경 ( +는 하는 일이 없음 )
=> OperatorEx4.java

3. 산술 연산자
3.1 사칙연산자 + - * /
피연산자가 정수인 경우, 나누는 수로 0 사용 불가 - ArithmeticException 발생
int보다 작은 타입은 피연산자를 int형으로 변환한 다음 연산 => 그걸 byte에 넣으려면 오류
=> OperatorEx5.java, OperatorEx6.java, OperatorEx7.java
데이터 손실을 막기 위해 큰 데이터타입 사용이 필요
=> OperatorEx8.java, OperatorEx9.java, OperatorEx10.java,
=> OperatorEx11.java, OperatorEx12.java, OperatorEx13.java