상속, 캡슐화, 추상화

코드의 재사용, 코드의 관리, 신뢰성 높은 프로그래밍
재사용성, 유지보수, 중복된 코드 제거

클래스 - 객체를 정의
클래스로부터 인스턴스화 해서 인스턴스(객체)를 생성
속성 - 멤버변수 // 기능 - 메서드

객체를 배열로 다룰 수 있음

객체지향 - 게터와 세터를 통한 값으 유효성 판단 - 지역변수의 유효성 판단

인스턴스변수 - 멤버변수 - 인스턴스가 생성되었을 때 - 클래스영역
클래스변수(static변수, 공유변수) - 멤버변수 - 클래스가 메모리에 올라 갈 때 - 클래스영역 - public 앞에 붙이면 같은 프로그램 내에서 어디서나 접근 가능한 전역변수의 성격을 가짐
지역변수 - 변수 선언문이 수행되었을때 - 클래스 영역 이외의 영역(메서드, 생성자, 초기화 블럭 내부) - 메서드 종료시 사용 불가

Math.sqrt() - 제곱근

메서드의 사용 이유 - 높은 재사용성, 중복된 코드의 제거, 프로그램의 구조화
매개변수 또한 지역변수

인자(argument, 원본) - 매개변수(parameter, 복사본)

반환타입이 void일때는 컴파일러에서 return;을 자동으로 생성해줌(생략가능)

- 메모리
메서드 호출시, 수행에 필요한 만큼의 메모리를 스택에 할당받음, 수행 마치면 메모리 반환 후 스택에서 제거(반환값 밑에 메서드에 제공)

재귀호출 - 자기자신을 호출 - 팩토리얼의 구현
스택오버플로우에러 발생가능 - 매개변수의 유효성 검사 필요

클래스메서드(static메서드)와 인스턴스 메서드
인스턴스와 관계없는 메서드를 클래스 메서드로 정의한다
클래스 멤버와 인스턴스 멤버간의 참조와 호출 - 인스턴스가 생성되었을 시 호출이 가능한 변수 및 메서드 // 인스턴스 생성 안되어도 호출 가능한 변수 및 메서드를 생각하기

오버로딩 - 매개변수의 개수 또는 타입이 다르면, 같은 이름을 사용해서 메서드를 정의할 수 있게 됨 - 과적하다/많이 싣다
=> 매개변수의 관계를 명확히하여 정의해야한다 - 같은 이름을 가진 메서드가 같은 역할을 한다는 것을 알 수 있게 해준다

가변인자(varargs) - '타입... 변수명' - 매개변수를 동적으로 지정해 줄 수 있음
=> 가변인자를 매개변수 중에서 제일 마지막에 선언해야 한다
=> 가변인자는 내부적으로 배열을 이용한다 - 가변인자가 선언된 메서드를 호출할때마다 배열이 새로 생성되는 비효율이 숨어있다
=> 배열로만 받으면, 인자 생략불가 - null이나 길이0인 배열을 인자로 직접 지정해주어야함
가변인자 선언한 메서드 오버로딩시, 구별되지 못하는 경우 발생 - 가변인자 사용한 메서드는 오버로딩 하지 않는것이 좋음
String 가변인자 받을때, new String[]{"asd", "bad", "fff"}는  가능하지만, {"asd", "asd", "df"}는 못받음

생성자 - 인스턴스 초기화 메서드 - 인스턴스 생성시 실행해야될 작업을 위해
클래스내 선언, 리턴값 없음 - 오버로딩 가능
클래스 내 생성자가 없으면, default 생성자를 컴파일러가 자동으로 생성해줌

생성자에서 다른 생성자 호출하기 - this(), this
=> 생성자의 이름으로 클래스 이름 대신 this를 사용한다
=> 한 생성자에서 다른 생성자를 호출할 떄는 반드시 첫 줄에서만 호출이 가능하다

this - 인스턴스 자신을 가리키는 참조변수 - 인스턴스의 주소가 저장됨 - 모든 인스턴스메서드에 지역변수로 숨겨진 채로 존재한다

인스턴스의 복사 => CarTest3.java

6. 변수의 초기화
지역변수는 사용하기 전에 반드시 초기화 해야한다
멤버변수(클래스 변수와 인스턴스 변수)와 배열의 초기화는 선택적이지만, 지역변수의 초기화는 필수적이다
boolean - false, char - '\u0000', byte/short/int - 0, long - 0L, float - 0.0f, double - 0.0d or 0.0, 참조형변수 - null

멤버변수 초기화방법 - 명시적 초기화, 생성자, 초기화 블럭

초기화블럭
=> 클래스 초기화 블럭 - 클래스 변수의 복잡한 초기화에 사용된다
=> 인스턴스 초기화 블럭 - 인스턴스 변수의 복잡한 초기화에 사용된다
=> BLockTest.java

기본값 -> 명시적 초기화 -> 클래스 초기화블럭
기본값 -> 명시적 초기화 -> 인스턴스 초기화 블럭 -> 생성자
