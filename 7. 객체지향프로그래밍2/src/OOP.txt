상속 - 조상클래스 자손클래스 - is a 관계
자손클래스는 조상클래스보다 같거나 많은 멤버를 갖는다 - 확장하기 때문

포함관계 - has a 관계

단일상속만을 허용함 - 관계의 명확성, 코드의 신뢰성

Object 클래스 - 모든 클래스의 조상

오버라이딩 - Overriding - 상속받은 메서드의 재정의
- 이름이 같아야, 매개변수가 같아야, 반환타입이 같아야 한다
=> 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다
=> 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다(예외 범위 또한)
=> 인스턴스메서드를 static 메서드로나 그 반대로 변경할 수 없다

super - 조상클래스로부터 상속받은 멤버 참조하는데 사용되는 참조변수
- 멤버가 중복정의되어 서로 구별해야하는 경우 사용

super() - 조상 클래스의 생성자
자손 클래스의 멤버가 조상 클래스의 멤버를 사용할 수 있어 조상의 멤버들이 먼저 초기화 되어있어야 함
모든 클래스의 생성자는 첫 줄에 반드시 자신의 다른 생성자 또는 조상의 생성자 호출해야함
=> 아니면 생성자 첫줄에 super();를 자동적으로 컴파일러가 추가 - 기본생성자가 필요한 이유
or super(매개변수); 를 직접 입력해주어 조상의 생성자에 의해 초기화 되도록 하여야함
super();로 Object를 불러냄

package 와 import
패키지 - 클래스의 묶음 - 클래스 또는 인터페이스 포함 가능
클래스가 물리적으로 하나의 클래스파일(.class)인 것과 같이, 패키지는 물리적으로 하나의 디렉토리이다.
java.lang.String 클래스 => 디렉토리 java의 서브디렉토리 lang에 속한 String.class파일이다.

하나의 소스파일에는 첫 문자으로 단 한 번의 패키지 선언만을 허용한다
모든 클래스는 반드시 하나의 패키지에 속해야 한다
패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다
패키지는 물리적으로 클래스파일(.class)을 포함하는 하나의 디렉토리이다

패키지의 선언 - package 패키지명;
- 주석과 공백을 제외한 첫 문장, 하나의 소스파일에 단 한번만 선언 가능
해당 소스파일에 포함된 모든 클래스나 인터페이스는 선언된 패키지에 속하게 됨
패키지명 - 소문자 원칙
자신이 속할 패키지를 지정하지 않은 클래스는 자동으로 '이름없는 패키지'에 속함
=> 컴파일 방법 다시 살펴보기
=> 컴파일 방법 다시 살펴보기
=> 컴파일 방법 다시 살펴보기

import문 - 다른 패키지의 클래스 사용하려면 패키지명 포함된 클래스 이름 사용
import문으로 사용하고자 하는 클래스의 패키지미리 명시하면 소스코드에 사용되는 클래스 이름에서 패키지명은 생략 가능

소스파일의 구조
1. package문 // 2. import문 // 3. 클래스 선언
import 패키지명.클래스명; or import 패키지명.*;
클래스 이름 대신해서만 * 사용가능 - 디렉토리대신해서는 사용 불가

System, String 같은 java.lang패키지 클래스들은 패키지명 없이 사용 가능
=> 모든 소스파일에 import java.lang.*; 묵시적으로 선언됨

static import문
static멤버를 호출할 때 클래스 이름 생략 가능 - 특정 클래스 static 멤버 자주 사용시 편리
import static java.lang.Integer.*; // Integer클래스의 모든 static 메서드
import static java.lang.Math.random; // Math.random()만 - 괄호 안붙임
import static java.lang.System.out; // System.out을 out만으로 참조 가능
=> StaticImportEx1.java
