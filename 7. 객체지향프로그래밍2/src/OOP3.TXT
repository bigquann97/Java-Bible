추상클래스 - abstract class
미완성 설계도 - 인스턴스 생성 불가, 자손클래스에 의해 완성

추상메서드 - 선언부만 있고 구현부는 없음
abstract 리턴타입 메서드이름();

추상화 - 클래스간의 공통점을 찾아내 공통의 조상을 만드는 작업
구체화 - 상속을 통해 클래스를 구현, 확장하는 작업
=> AbstractClass.java

인터페이스 - 일종의 추상클래스 - 추상화 정도가 높아 일반메서드나 멤버변수를 구성원으로 가질 수 업슴
오직 추상메서드와 상수만을 멤버로 가질 수 있음 - 기본 설계도

인터페이스의 작성 - 접근제어자 public or default 사용 가능
interface 인터페이스 이름{
    public static final 타입 상수이름 = 값;
    public abstract 메서드이름(매개변수목록);
}

모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있다
모든 메서드는 public abstract이어야 하며, 이를 생략할 수 있따 - 단, static메서드와 디폴트 메서드는 예외(JDK1.8부터)

인터페이스의 상속 - implements로 여러개 상속 가능
인터페이스의 구현 - implements로 구현
조상 메서드보다 넓은 범위의 접근 제어자 지정해야한다 => 구현시 public으로 접근제어자 설정해야함

인터페이스를 이용한 다중상속 - 클래스 하나, 인터페이스 다량 상속 가능

인터페이스를 이용한 다형성
인터페이스는 참조변수로 참조하는 것과 매개변수 타입으로 사용 가능, 리턴값 또한
=> ParserTest.java

인터페이스의 장점
개발시간 단축, 표준화 가능, 서로 관계없는 클래스들에게 관계 맺어주기, 독립적 프로그래밍 가능

인터페이스의 이해
클래스를 사용하는쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다
메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부 만 알면 된다.(내용은 몰라도 된다.)

디폴트 메서드와 static 메서드
1.8부터 디폴트 메서드와 static메서드 추가 가능 - static메서드 접근자 항상 public, 생략할 수 있음

디폴트 메서드 - 인터페이스의 디폴트 메서드
인터페이스에 메서드 추가 - 추상메서드 추가한다는 것 - 모든 클래스들이 추가된 메서드를 구현해야함
디폴트메서드 - 추상메서드의 기본적인 구현을 제공하는 메서드 - 디폴트 메서드가 추가되어도 해당 인터페이스를 구현한 클래스 변경하지 않아도 됨
default 키워드, 몸통 있어야함, 접근제어자 public 및 생략 가능

내부 클래스
클래스 내에 선언된 클래스 - 긴밀한 관계가 있음 - 두 클래스 멤버들 간 쉽게 접근 가능, 외부에 불필요한 클래스 감춤(복잡성 줄임 - 캡슐화)

내부 클래스 종류 => 멤버변수와 똑같은 성질을 가짐
인스턴스 클래스 - 멤버변수 선언위치에 선언, 외부 클래스의 인스턴스 멤버처럼 다루어짐
=> 외부 클래스의 인스턴스 멤버들과 관련된 작업에 사용될 목적

스태틱 클래스 - 외부 클래스의 멤버변수 선언위치에 선언, 외부 클래스의 static 멤버처럼 다루어짐
=> 외부 클래스의 static 멤버, 특히 static메서드에 사용될 목적으로 선언

지역 클래스 - 외부 클래스의 메서드나 초기화 블럭 안에 선언 - 선언된 영역 내부에서만 사용 가능

익명 클래스 -클래스의 선언과 객체의 생성을 동시에 하는 이름 없는 클래스 (일회용)

내부 클래스 중 스태틱 클래스만 static 멤버를 가질 수 있음 - final 과 static 동시에 붙은 상수는 모든 내부 클래스에서 정의 가능
=> InnerEx1.java

익명 클래스 - anonymous class