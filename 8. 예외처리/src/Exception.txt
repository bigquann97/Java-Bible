컴파일 에러, 런타임 에러, 논리적 에러
런타임 오류 => 에러 / 예외

Object - Throwable - Exception / Error

예외의 최고조상 Exception
RuntimeException클래스 하위 항목들

예외클래스의 두 분류
Exception 클래스와 그 자손들(RuntimeException 과 자손 제외) - 주로 외부영향 - 사용자의 동작에의해 발생 - 존재X파일이름입력, 클래스이름 잘못적음..
RuntimeException클래스와 그 자손들 => 프로그래머의 실수에 의해 발생 - 배열범위, null 참조변수 멤버 호출, 형변환오류, 정수 0으로 나눔 ..

try - catch문
예외처리 - 프로그램의 비정상 종료를 막고, 정상적 실행 상태를 유지하는 것

예외 발생시, catch블럭의 괄호 내 선언된 참조변수의 종류와 생성된 예외클래스의 인스턴스에 instanceof 연산자 이용 검사 - true 찾을때까지

printStackTrace() - 예외 발생 당시 호출스택에 있던 메서드의 정보와 예외 메시지를 화면에 출력
getMessage() - 발생한 예외 클래스의 인스턴스에 저장된 메시지를 얻음

멀티 캐치블럭 - catch ( ExceptionA | ExceptionB e)

throw를 통한 고의 예외 발생
Exception e = new Exception("고의 발생");
throw e;

Exception 클래스들이 발생할 가능성 있는 문장은 예외처리 안하면 컴파일조차 안됨 - checked 예외
RuntimeException 클래스들 예외는 프로그래머에 의해 실수로 발생하기 때문에 예외처리 강제하지 않음 - unchecked 예외
=> 이 예외에도 예외처리가 필수적이라면, 참조변수와 배열이 사용되는 모든 곳에 예외처리를 해주어야함

메서드에 예외선언하기 - 메서드 선언부에 throws를 사용해 예외를 적어줌 - 자손타입의 예외까지도 발생할 수 있음
=> 반드시 처리해주어야 하는 예외들만 선언해줌(Exception 클래스들)
=> 메서드의 throws에 명시하는건 예외 처리가 아니라, 자신을 호출한 메서드에게 예외를 전달하여 예외처리를 맡기는 것

예외가 발생한 메서드 내에서 자체적으로 처리해도 되는 것은 메서드 내에서 try-catch문을 사용해 처리
메서드에 호출 시 넘겨받아야 할 값(fileName)을 다시 받아야 하는 경우(메서드 내에서 자체해결 안되는경우)에는
 => 예외를 메서드에 선언해서 호출한 메서드에서 처리해야한다

finally 블럭 - 예외 발생여부에 관계없이 항상 수행되어야 하는 문장 - return되어도 무조건 수행이 됨

자동의 자원 반환 - try with resources 문 - I/O 관련 클래스 - close()
try(객체 생성 문장; 객체 생성 문장) {} catch {}..
자동으로 close()가 호출되어야 하려면, AutoCloseable인터페이스를 구현해야함

억제된 예외

사용자정의 예외 만들기
알맞은 예외 클래스를 상속받아 정의
class MyException extends Exception {
    MyException(String msg) {
        super(msg);
    }
}

최근엔, 예외처리를 선택적으로 할 수 있도록 RuntimeException을 상속받아 작성하는 쪽 - 불필요한 try catch문 없애고자

예외 되던지기 - exception re-throwing
반환값이 있는 return문의 경우, catch블럭에도 return문이 필요하다 - 예외 되던지기를 하면 return문이 없어도 됨

연결된 예외 - 한 예외가 다른 예외를 발생시킬 수 있음
A를 B의 원인 예외 (cause exception)라 한다.

Throwable initCause(Throwable cause) - 지정한 예외를 원인예외로 등록
Throwable getCause() - 원인 예외를 반환











